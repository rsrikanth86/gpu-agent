/*
Copyright (c) Advanced Micro Devices, Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


#ifndef __SDK_MEM_HPP__
#define __SDK_MEM_HPP__

#include "include/sdk/base.hpp"
#include "lib/utils/mtrack.hpp"

enum {
    SDK_MEM_ALLOC_NONE,
    SDK_MEM_ALLOC_ABST_NODES,
    SDK_MEM_ALLOC_ENTIRE_HBM_HASH_ENTRY_DATA,
    SDK_MEM_ALLOC_FLOW,
    SDK_MEM_ALLOC_HASH_HW_KEY_DEPGM,
    SDK_MEM_ALLOC_HASH_HW_KEY_INS,
    SDK_MEM_ALLOC_HASH_HW_KEY_UPD,
    SDK_MEM_ALLOC_HASH_STATS,
    SDK_MEM_ALLOC_HASH_SW_KEY_MASK_INS,
    SDK_MEM_ALLOC_HBM_HASH_BUCKETS,
    SDK_MEM_ALLOC_HBM_HASH_ENTRIES,
    SDK_MEM_ALLOC_HBM_HASH_ENTRY,
    SDK_MEM_ALLOC_HBM_HASH_ENTRY_HW_KEY,
    SDK_MEM_ALLOC_HBM_HASH_HINT_GROUP,
    SDK_MEM_ALLOC_HBM_HASH_SPINE_ENTRY,
    SDK_MEM_ALLOC_HBM_HASH_SPINE_ENTRY_HW_KEY,
    SDK_MEM_ALLOC_HBM_HASH_SPINE_ENTRY_SW_KEY,
    SDK_MEM_ALLOC_HBM_HASH_STATS,
    SDK_MEM_ALLOC_HBM_HASH_TABLE_ENTRY,
    SDK_MEM_ALLOC_ID_HASH,
    SDK_MEM_ALLOC_ID_HASH_ENTRY,
    SDK_MEM_ALLOC_ID_HASH_ENTRY_DATA,
    SDK_MEM_ALLOC_ID_HASH_ENTRY_KEY,
    SDK_MEM_ALLOC_ID_HASH_NAME,
    SDK_MEM_ALLOC_ID_HW_KEY,
    SDK_MEM_ALLOC_ID_TCAM,
    SDK_MEM_ALLOC_ID_TCAM_ENTRY,
    SDK_MEM_ALLOC_ID_TCAM_ENTRY_DATA,
    SDK_MEM_ALLOC_ID_TCAM_ENTRY_KEY,
    SDK_MEM_ALLOC_ID_TCAM_ENTRY_KEY_MASK,
    SDK_MEM_ALLOC_ID_TCAM_NAME,
    SDK_MEM_ALLOC_ID_TCAM_STATS,
    SDK_MEM_ALLOC_LIB_BITMAP,
    SDK_MEM_ALLOC_LIB_CRCFAST,
    SDK_MEM_ALLOC_LIB_DIRECTMAP,
    SDK_MEM_ALLOC_LIB_DIRECT_MAP_DATA,
    SDK_MEM_ALLOC_LIB_DIRECT_MAP_ENTRY,
    SDK_MEM_ALLOC_LIB_DIRECT_MAP_HW_DATA,
    SDK_MEM_ALLOC_LIB_DIRECT_MAP_SW_DATA,
    SDK_MEM_ALLOC_LIB_HT,
    SDK_MEM_ALLOC_LIB_INDEXER,
    SDK_MEM_ALLOC_LIB_LFQ,
    SDK_MEM_ALLOC_LIB_SHM,
    SDK_MEM_ALLOC_LIB_SLAB,
    SDK_MEM_ALLOC_LIB_THREAD,
    SDK_MEM_ALLOC_LIB_EVENT_THREAD,
    SDK_MEM_ALLOC_LIB_TWHEEL,
    SDK_MEM_ALLOC_MEM_HASH,
    SDK_MEM_ALLOC_MEM_HASH_API_CTX,
    SDK_MEM_ALLOC_MEM_HASH_HINT_TABLE,
    SDK_MEM_ALLOC_MEM_HASH_MAIN_TABLE,
    SDK_MEM_ALLOC_MEM_HASH_PROPERTIES,
    SDK_MEM_ALLOC_MEM_HASH_TABLE_BUCKETS,
    SDK_MEM_ALLOC_MEM_HASH_TABLE_ENTRIES,
    SDK_MEM_ALLOC_METRICS_HW_COUNTERS,
    SDK_MEM_ALLOC_SLTCAM_ENTRIES,
    SDK_MEM_ALLOC_CATALOG,
    SDK_MEM_ALLOC_DEVICE,
    SDK_MEM_ALLOC_LIB_CONFIG,
    SDK_MEM_ALLOC_ID_PLATFORM_MEMORY,
    SDK_MEM_ALLOC_PD,
    SDK_MEM_ALLOC_LIF_MGR,
    SDK_MEM_ALLOC_LIB_PLATFORM,
    SDK_MEM_ALLOC_LIF_QSTATE,
    SDK_MEM_ALLOC_ID_LINKMGR,
    SDK_MEM_ALLOC_PORT_DEBUG,
    SDK_MEM_ALLOC_SLHASH_BUCKETS,
    SDK_MEM_ALLOC_SLHASH,
    SDK_MEM_ALLOC_INDEX_POOL,
    SDK_MEM_ALLOC_FTL,
    SDK_MEM_ALLOC_FTL_PROPERTIES,
    SDK_MEM_ALLOC_FTL_MAIN_TABLE,
    SDK_MEM_ALLOC_FTL_MAIN_TABLE_BUCKETS,
    SDK_MEM_ALLOC_FTL_HINT_TABLE,
    SDK_MEM_ALLOC_FTL_HINT_TABLE_BUCKETS,
    SDK_MEM_ALLOC_FTL_THREAD_HINT_POOL,
    SDK_MEM_ALLOC_FTL_INDEXER,
    SDK_MEM_ALLOC_FTL_INDEXER_POOL,
    SDK_MEM_ALLOC_HASH_NAME,
    SDK_MEM_ALLOC_FTLV4_MAIN_TABLE,
    SDK_MEM_ALLOC_FTLV4_HINT_TABLE,
    SDK_MEM_ALLOC_FTLV4_PROPERTIES,
    SDK_MEM_ALLOC_FTLV4_TABLE_BUCKETS,
    SDK_MEM_ALLOC_FTLV4_TABLE_ENTRIES,
    SDK_MEM_ALLOC_INFRA,
    SDK_MEM_ALLOC_LFQ_MSG,
    SDK_MEM_ALLOC_LIB_DPDK_DEVICE,
    SDK_MEM_ALLOC_LIB_DPDK_BUFFER,
    SDK_MEM_ALLOC_EVENT_MGR,
    SDK_MEM_ALLOC_FTL_DEV_IMPL_LOCKS,
    SDK_MEM_ALLOC_FTL_POLLER_SLOT_DATA,
    SDK_MEM_ALLOC_KVSTORE,
    SDK_MEM_ALLOC_EVENT_TRACER,
    SDK_MEM_ALLOC_ACCEL_RINGS_METRICS,
    SDK_MEM_ALLOC_FLOW_SESSION_CTX,
    SDK_MEM_ALLOC_TESTAPP,
    SDK_MEM_ALLOC_FSM,
    SDK_MEM_ALLOC_ID_UPGRADE,
    SDK_MEM_ALLOC_ID_OPERD,
    SDK_MEM_ALLOC_CONNTRACK_CTX,
    SDK_MEM_ALLOC_EDMAQ,
    SDK_MEM_ALLOC_PORT,
    SDK_MEM_ALLOC_EDMAQ_PENDING,
    SDK_MEM_ALLOC_ADMINQ,
    SDK_MEM_ALLOC_NOTIFYQ,
    SDK_MEM_ALLOC_NICMGR,
    SDK_MEM_ALLOC_LIB_THREAD_POOL,
    SDK_MEM_ALLOC_QOS_IMPL_CLASSES,
    SDK_MEM_ALLOC_DPCAP,
    SDK_MEM_ALLOC_NVME,
    SDK_MEM_ALLOC_VIRTIO_BLK,
    SDK_MEM_ALLOC_MET,
    SDK_MEM_ALLOC_MET_REPL_ENTRY,
    SDK_MEM_ALLOC_MET_REPL_ENTRY_DATA,
    SDK_MEM_ALLOC_MET_REPL_LIST,
    SDK_MEM_ALLOC_MET_REPL_TABLE_ENTRY,
    SDK_MEM_ALLOC_MET_STATS,
    SDK_MEM_ALLOC_FS_USAGE_STATS,
    SDK_MEM_ALLOC_LIB_IPC_PEER,
    SDK_MEM_ALLOC_SHMSTORE,
    SDK_MEM_ALLOC_LIB_TLS,
    SDK_MEM_ALLOC_LIB_TABLE,
    SDK_MEM_ALLOC_SSDK_INFRA,
    SDK_MEM_ALLOC_PACKED_MEMHASH,
    SDK_MEM_ALLOC_SLHASH_STATS,
    SDK_MEM_ALLOC_SLTCAM_DB_SIZE,
    SDK_MEM_ALLOC_ASIC_MEM_LAYOUT,
    SDK_MEM_ALLOC_PLATFORM_ASIC,
    SDK_MEM_ALLOC_DLEFT,
    SDK_MEM_ALLOC_RING_SLOT,
    SDK_MEM_ALLOC_NICAGENT_ASIC,
    SDK_MEM_ALLOC_MEM_ALLOCATOR,
    SDK_MEM_ALLOC_SDMAQ
};

static inline void *
sdk_malloc (__UNUSED__ const char *id_str, uint32_t size)
{
    return malloc(size);
}

static inline void *
sdk_calloc (__UNUSED__ const char *id_str, uint32_t size)
{
    return calloc(1, (size));
}

static inline void
sdk_free (__UNUSED__ const char *id_str, void *ptr)
{
    free(ptr);
}

#ifdef ENABLE_SDK_MTRACK
#define SDK_MALLOC(alloc_id, size)    (sdk::utils::g_sdk_mem_mgr.mtrack_alloc(static_cast<uint32_t>(alloc_id), false, size, __FUNCTION__, __LINE__))
#define SDK_CALLOC(alloc_id, size)    (sdk::utils::g_sdk_mem_mgr.mtrack_alloc(static_cast<uint32_t>(alloc_id), true, size, __FUNCTION__, __LINE__))
#define SDK_FREE(alloc_id, ptr)       (sdk::utils::g_sdk_mem_mgr.mtrack_free(static_cast<uint32_t>(alloc_id), ptr, __FUNCTION__, __LINE__))
#else
#define SDK_MALLOC(alloc_id, size)    sdk_malloc(#alloc_id, size)
#define SDK_CALLOC(alloc_id, size)    sdk_calloc(#alloc_id, size)
#define SDK_FREE(alloc_id, ptr)       sdk_free(#alloc_id, ptr)
#endif

#endif    // __SDK_MEM_HPP__

